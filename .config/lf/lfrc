# Sets
set shell sh
set hidden true # Show hidden 
set icons # Show icons
set cursorpreviewfmt "" # No cursor preview
# set previewer ~/.config/lf/lf_kitty_preview # Use Kitty to preview image
# set cleaner ~/.config/lf/lf_kitty_clean
set previewer ~/.config/lf/pv.sh
set shellopts '-eu'
set number
set relativenumber

# Commands
cmd edit-config ${{
    $EDITOR $DOT/.config/lf/lfrc
    lf -remote "send $id source $DOT/.config/lf/lfrc"
}}

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# cmd extract ${{
#     set -f
#     case $f in
#         *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
#         *.tar.gz|*.tgz) tar xzvf $f;;
#         *.tar.xz|*.txz) tar xJvf $f;;
#         *.zip) unzip $f;;
#         *.rar) unrar x $f;;
#         *.7z) 7z x $f;;
#     esac
# }}
#
# cmd tar ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     tar czf $1.tar.gz $1
#     rm -rf $1
# }}
#
# cmd zip ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     zip -r $1.zip $1
#     rm -rf $1
# }}

cmd new-dir ${{
    set -f
    printf "Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# Bindings
map <enter> shell # Use enter for shell commands

map a push %mkdir<space> # Create new dir
map t push %touch<space> # Create new file
map <delete> delete
map D delete

map R :rename; cmd-end
map C edit-config
map <a-n> new-dir

map i $~/.config/lf/pv.sh $f | less -RX

